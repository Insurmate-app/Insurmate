(()=>{var e={760:(e,t,s)=>{const r=s(134),a=s(829),o=process.env.JWT_SECRET,n=s(278);s(392),e.exports={createUser:async(e,t,s)=>{try{const s=e.body,a=await r.createUser(s);t.status(201).json(a)}catch(e){s(e)}},resetPassword:async(e,t,s)=>{try{const{email:s,password:a}=e.body;await r.resetPassword(s,a),t.status(200).json("Password reset successful.")}catch(e){s(e)}},loginUser:async(e,t,s)=>{try{const{email:s,password:n}=e.body;await r.loginUser(s,n);const i=a.sign({id:s},o,{expiresIn:"15m"});t.cookie("token",i,{httpOnly:!0,secure:!0,maxAge:9e5}),t.status(200).json({token:i})}catch(e){s(e)}},verifyUser:async(e,t,s)=>{try{const{email:s,otpToken:a}=e.body;await r.verifyUser(s,a),t.status(200).json("Verification Successful.")}catch(e){s(e)}},regenerateOtp:async(e,t,s)=>{try{const{email:s}=e.body;await r.regenerateOtp(s),t.status(200).json("OTP regenerated successfully.")}catch(e){s(e)}},logoutUser:(e,t,s)=>{try{t.clearCookie("token",n.authenticate("jwt",{session:!1}),{httpOnly:!0,secure:!0}),t.status(200).json({message:"Logged out successfully."})}catch(e){s(e)}}}},647:e=>{e.exports=function(e,t=500){const s=new Error(e);return s.statusCode=t,s}},509:(e,t,s)=>{const{createLogger:r,format:a,transports:o}=s(124),{combine:n,timestamp:i,printf:c}=a,d=c((({level:e,message:t,timestamp:s})=>`${s} ${e}: ${t}`)),u=r({level:"info",format:n(i(),d),transports:[new o.Console,new o.File({filename:"app.log"})]});e.exports=u},857:e=>{e.exports=(e,t,s,r)=>{const a=e.statusCode||500;s.status(a).json({statusCode:a,message:e.message||"Internal Server Error"})}},870:(e,t,s)=>{const{validationResult:r}=s(356);e.exports=function(e,t,s){const a=r(e);if(!a.isEmpty()){const e=a.array().map((e=>e.msg));return t.status(400).json({message:"Validation failed",errors:e})}s()}},778:(e,t,s)=>{const r=s(37),a=new r.Schema({email:{type:String,unique:!0,required:!0,match:[/.+@.+\..+/,"Please enter a valid email address"],maxlength:100},password:{type:String,required:!0,minlength:8,maxlength:128},companyName:{type:String,required:!0,minlength:8,maxlength:100},failedLoginAttempts:{type:Number,default:0,required:!0},activeAccount:{type:Boolean,default:!0,required:!0},address:{addressLine1:{type:String,required:!0,maxLength:300},addressLine2:{type:String,maxLength:50},city:{type:String,required:!0,maxLength:30},state:{type:String,required:!0,maxLength:30},zipCode:{type:String,required:!0,maxLength:30}}},{timestamps:!0});e.exports=r.model("User",a)},414:(e,t,s)=>{const r=s(252).Router(),a=s(278);s(392);const o=s(870),{check:n}=s(356),i=s(760),c=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,d=/^(?=.*[A-Z])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$/;r.post("/create",[n("email").notEmpty().withMessage("Email is required").isLength({max:100}).withMessage("Email must be no more than 100 characters long").matches(c).withMessage("Invalid email format"),n("password").notEmpty().withMessage("Password is required").isLength({min:8,max:28}).withMessage("Password must be between 8 and 28 characters long").matches(d).withMessage("Password must contain at least one uppercase letter and one special character"),n("companyName").notEmpty().withMessage("Company name is required").isLength({min:8,max:28}).withMessage("Company name must be between 8 and 28 characters long"),n("address.addressLine1").notEmpty().withMessage("Address line 1 is required").isLength({max:300}).withMessage("Address line 1 must be no more than 300 characters long"),n("address.addressLine2").optional().isLength({max:50}).withMessage("Address line 2 must be no more than 50 characters long"),n("address.city").notEmpty().withMessage("City is required").isLength({max:30}).withMessage("City must be no more than 30 characters long"),n("address.state").notEmpty().withMessage("State is required").isLength({max:30}).withMessage("State must be no more than 30 characters long"),n("address.zipCode").notEmpty().withMessage("Zip code is required").isLength({max:30}).withMessage("Zip code must be no more than 30 characters long")],o,i.createUser),r.post("/login",[n("email").notEmpty().withMessage("Email is required").isLength({max:100}).withMessage("Email must be no more than 100 characters long").matches(c).withMessage("Invalid email format"),n("password").notEmpty().withMessage("Password is required").isLength({min:8,max:28}).withMessage("Password must be between 8 and 28 characters long").matches(d).withMessage("Password must contain at least one uppercase letter and one special character")],o,i.loginUser),r.post("/verify",[n("email").notEmpty().withMessage("Email is required").isLength({max:100}).withMessage("Email must be no more than 100 characters long").matches(c).withMessage("Invalid email format"),n("otpToken").notEmpty().withMessage("OTP Token is required").isNumeric().isLength({max:6}).withMessage("OTP Token must be no more than 6 digits or less than long")],o,i.verifyUser),r.put("/reset-password",[n("email").notEmpty().withMessage("Email is required").isLength({max:100}).withMessage("Email must be no more than 100 characters long").matches(c).withMessage("Invalid email format"),n("password").notEmpty().withMessage("Password is required").isLength({min:8,max:28}).withMessage("Password must be between 8 and 28 characters long").matches(d).withMessage("Password must contain at least one uppercase letter and one special character")],o,i.resetPassword),r.post("/regenerate-otp",[n("email").notEmpty().withMessage("Email is required").isLength({max:100}).withMessage("Email must be no more than 100 characters long").matches(c).withMessage("Invalid email format")],o,i.regenerateOtp),r.post("/logout",a.authenticate("jwt",{session:!1}),i.logoutUser),e.exports=r},392:(e,t,s)=>{const r=s(928);s(818).config({path:r.resolve(__dirname,"../.env")});const a=s(714).Strategy,o=s(714).ExtractJwt,n=s(278),i=s(134),c={jwtFromRequest:o.fromExtractors([e=>{let t=null;return e&&e.cookies&&(t=e.cookies.token),t}]),secretOrKey:process.env.JWT_SECRET};n.use(new a(c,(async(e,t)=>{try{return t(null,await i.findUserByEmail(e.id)||!1)}catch(e){return t(e,!1)}}))),e.exports=n},975:(e,t,s)=>{s(818).config();const r=s(572),a=s(509),o=process.env.EMAIL,n=process.env.PASSWORD,i=r.createTransport({host:"mail.wecare-insurance.com",port:587,auth:{user:o,pass:n}});e.exports={sendEmail:async({to:e,subject:t,text:s})=>{const r={from:o,to:e,subject:t,text:s};try{return await i.sendMail(r)}catch(e){throw a.error("Error sending email:",e),new Error("Error sending email")}}}},224:(e,t,s)=>{const r=s(486),a=s(288),{LRUCache:o}=s(678),n=s(509),i=s(647);a.authenticator.options={step:900};const c=new o({max:300,maxSize:300,sizeCalculation:()=>1,ttl:9e5,ttlAutopurge:!0});e.exports={hashPassword:async function(e){try{return await r.hash(e,10)}catch(e){throw n.error(e.message),e}},checkPassword:async function(e,t){try{return await r.compare(e,t)}catch(e){throw n.error(e.message),e}},generateOtp:async e=>{try{const t=a.authenticator.generateSecret(),s=a.authenticator.generate(t);return c.set(e,{otp:s,secret:t}),s}catch(e){throw n.error(e.message),e}},verifyOtp:async(e,t)=>{try{const s=c.get(e);if(!s)throw n.error(`OTP not found or expired for id: ${e}`),i("OTP not found or expired.",401);const{otp:r,secret:a}=s;if(console.log(`Cached OTP: ${r}, Secret: ${a}, Provided Token: ${t} for id: ${e}`),r.toString().trim()!==t.toString().trim())throw i("Invalid OTP",401);c.delete(e)}catch(t){throw t.statusCode>=400&&t.statusCode<500?t:(n.error(`Error during OTP verification for id: ${e} - ${t.message}`),i("Your OTP is invalid. Please try again.",500))}}}},134:(e,t,s)=>{const r=s(778),a=s(975),o=s(825),n=s(509),i=s(647),c=s(224),d=async(e,t)=>{await a.sendEmail({to:e,subject:"Activate Account",text:`Hi there, \nPlease use the following OTP to activate your account: ${t}. This OTP is valid for 5 minutes.`})},u=async e=>{const t=await r.findOne({email:e});if(!t)throw i("User not found.",404);return t};e.exports={findUserByEmail:u,createUser:async e=>{try{e.failedLoginAttempts=0,e.activeAccount=!1;const t=await c.hashPassword(e.password);e.password=t;const s=await r.create(e),a=await c.generateOtp(s.email);return s&&await d(s.email,a),o.pick(s,["email","companyName","address.addressLine1","address.addressLine2","address.city","address.state","address.zipCode"])}catch(e){if(11e3===e.code){const t=Object.keys(e.keyValue)[0];throw i(`Duplicate field value: '${t}' already exists.`,409)}throw n.error(e.message),e}},resetPassword:async(e,t)=>{try{const s=await u(e);if(!s)throw i("User not found.",404);t=await c.hashPassword(t);const a=await r.findByIdAndUpdate(s._id,{password:t,activeAccount:!1},{new:!0});if(!a)throw i("User not found.",404);const o=await c.generateOtp(s.email);a&&await d(a.email,o)}catch(e){throw e.statusCode>=400&&e.statusCode<500?e:(n.error(e.message),i("Unable to reset password.",500))}},loginUser:async(e,t)=>{try{const s=await u(e);if(!s)throw i("User not found.",400);if(!s.activeAccount)throw i("Account is inactive, a new verification code has been sent to your email address.",401);if(s.failedLoginAttempts>=5)throw i("Account is locked due to more than 5 failed login attempts.",401);if(!await c.checkPassword(t,s.password))throw s.failedLoginAttempts+=1,await s.save(),i("Invalid password.",401);s.failedLoginAttempts=0,s.activeAccount=!0,await s.save()}catch(e){throw e.statusCode>=400&&e.statusCode<500?e:(n.error(e.message),i("Unable to login.",500))}},verifyUser:async(e,t)=>{try{const s=await u(e);if(!s)throw i("User not found.",400);await c.verifyOtp(e,t),s.activeAccount=!0,s.failedLoginAttempts=0,await s.save()}catch(e){throw e.statusCode>=400&&e.statusCode<500?e:(n.error(e.message),i("Unable to verify.",500))}},regenerateOtp:async e=>{try{const t=await u(e);if(!t)throw i("User not found.",404);if(t.activeAccount)throw i("Account is already active.",400);await r.findByIdAndUpdate(t._id,{activeAccount:!1},{new:!0}),console.log(e);const s=await c.generateOtp(e);await d(t.email,s)}catch(e){if(e.statusCode>=400&&e.statusCode<500)throw e;n.error(e.message)}}}},486:e=>{"use strict";e.exports=require("bcrypt")},898:e=>{"use strict";e.exports=require("cookie-parser")},577:e=>{"use strict";e.exports=require("cors")},818:e=>{"use strict";e.exports=require("dotenv")},252:e=>{"use strict";e.exports=require("express")},617:e=>{"use strict";e.exports=require("express-graceful-shutdown")},239:e=>{"use strict";e.exports=require("express-healthcheck")},763:e=>{"use strict";e.exports=require("express-rate-limit")},356:e=>{"use strict";e.exports=require("express-validator")},525:e=>{"use strict";e.exports=require("helmet")},829:e=>{"use strict";e.exports=require("jsonwebtoken")},825:e=>{"use strict";e.exports=require("lodash")},678:e=>{"use strict";e.exports=require("lru-cache")},37:e=>{"use strict";e.exports=require("mongoose")},572:e=>{"use strict";e.exports=require("nodemailer")},288:e=>{"use strict";e.exports=require("otplib")},278:e=>{"use strict";e.exports=require("passport")},714:e=>{"use strict";e.exports=require("passport-jwt")},124:e=>{"use strict";e.exports=require("winston")},928:e=>{"use strict";e.exports=require("path")}},t={};function s(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,s),o.exports}(()=>{"use strict";s(818).config();const e=s(525),t=s(37),r=s(252),a=s(239),o=s(617),n=s(763),i=s(577),c=s(898),d=s(278),u=r(),l=s(857),m=s(414),h=process.env.DATABASE_URL,p=process.env.MAX_POOL_SIZE,g=process.env.MAX_Idle_Time_MS,w=process.env.CONECTION_TIMEOUT_MS;u.use(e()),u.use(((e,t,s)=>{t.setHeader("X-XSS-Protection","1; mode=block"),s()}));const y=n({windowMs:9e5,max:1e3,message:"Too many requests from this IP, please try again later"});u.use(y);const f={origin:process.env.FRONTEND_URL,credentials:!0};u.use(i(f)),u.use(d.initialize()),u.use(c()),u.use(r.json()),u.use(r.urlencoded({extended:!1}));const x=process.env.PORT||3e3;u.use("/health",a()),u.use("/v1/api/user",m),u.get("/",((e,t)=>t.send("App is working!"))),u.use(l),u.use(o(u));const v=u.listen(x,(()=>{console.log(`Server is running on port ${x}`)}));v.on("close",(()=>{console.log("Server has closed all connections.")})),t.connect(h,{maxPoolSize:p,maxIdleTimeMS:g,connectTimeoutMS:w}).then((()=>{console.log("Connected to database!")})).catch((e=>{console.log(e),console.log("Connection failed!")}));const E=async()=>{console.log("Graceful shutdown initiated."),v.close((e=>{e&&(console.error("Error closing server:",e),process.exit(1)),console.log("HTTP server closed, now closing MongoDB connection."),t.disconnect()})),setTimeout((()=>{console.log("Forcing shutdown after timeout."),process.exit(1)}),1e4)};process.on("SIGTERM",E),process.on("SIGINT",E)})()})();